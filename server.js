// Generated by CoffeeScript 1.10.0

/*
Created by MIROOF on 04/03/2015
Virtual gamepad application
 */

(function() {
  var app, config, express, gamepad_hub, gp_hub, https, fs, server, io, kb_hub, keyboard_hub, log, path, port, suffix, touchpad_hub, tp_hub;

  path = require('path');
  express = require('express');
  app = express();
  https = require('https');
  fs = require('fs');

  // خواندن تنظیمات و ماژول‌های مورد نیاز
  config = require('./config.json');
  log = require('./lib/log');

  // تنظیمات SSL برای سرور HTTPS
  var options = {
    key: fs.readFileSync(path.join(__dirname, 'ssl', 'key.pem')),
    cert: fs.readFileSync(path.join(__dirname, 'ssl', 'cert.pem')),
    // اگر گواهی CA دارید، خط زیر را فعال کنید
    // ca: fs.readFileSync(path.join(__dirname, 'ssl', 'ca_bundle.crt'))
  };

  // ایجاد سرور HTTPS
  server = https.createServer(options, app);

  // اتصال Socket.IO به سرور HTTPS
  io = require('socket.io')(server);

  // بارگذاری ماژول‌های مربوط به کنترل‌ها
  gamepad_hub = require('./app/virtual_gamepad_hub');
  gp_hub = new gamepad_hub();

  keyboard_hub = require('./app/virtual_keyboard_hub');
  kb_hub = new keyboard_hub();

  touchpad_hub = require('./app/virtual_touchpad_hub');
  tp_hub = new touchpad_hub();

  // تنظیم پورت از متغیرهای محیطی یا فایل تنظیمات
  port = process.env.PORT || config.port;

  // تعیین پسوند URL بر اساس نوع کنترل
  if (config.analog) {
    suffix = '?analog';
  } else {
    suffix = '';
  }

  // ریدایرکت به صفحه اصلی
  app.get('/', function(req, res) {
    if (config.useGamepadByDefault) {
      return res.redirect('gamepad.html' + suffix);
    } else {
      return res.redirect('index.html' + suffix);
    }
  });

  // سرو کردن فایل‌های استاتیک
  app.use(express["static"](__dirname + '/public'));

  // مدیریت اتصالات Socket.IO
  io.on('connection', function(socket) {
    // مدیریت قطع اتصال
    socket.on('disconnect', function() {
      if (socket.gamePadId !== void 0) {
        log('info', ' Gamepad disconnected');
        return gp_hub.disconnectGamepad(socket.gamePadId, function() {});
      } else if (socket.keyBoardId !== void 0) {
        log('info', ' Keyboard disconnected');
        return kb_hub.disconnectKeyboard(socket.keyBoardId, function() {});
      } else if (socket.touchpadId !== void 0) {
        log('info', ' Touchpad disconnected');
        return tp_hub.disconnectTouchpad(socket.touchpadId, function() {});
      } else {
        return log('info', ' Unknown disconnect');
      }
    });

    // مدیریت اتصال Gamepad
    socket.on('connectGamepad', function() {
      return gp_hub.connectGamepad(function(gamePadId) {
        var ledBitField;
        ledBitField = config.ledBitFieldSequence[gamePadId];
        if (gamePadId !== -1) {
          log('info', ' connectGamepad: success');
          socket.gamePadId = gamePadId;
          return socket.emit('gamepadConnected', {
            padId: gamePadId,
            ledBitField: ledBitField
          });
        } else {
          return log('warning', ' connectGamepad: failed');
        }
      });
    });

    // مدیریت رویدادهای Gamepad
    socket.on('padEvent', function(data) {
      log('debug', 'padEvent ' + JSON.stringify(data));
      if (socket.gamePadId !== void 0 && data) {
        return gp_hub.sendEvent(socket.gamePadId, data);
      }
    });

    // مدیریت اتصال Keyboard
    socket.on('connectKeyboard', function() {
      return kb_hub.connectKeyboard(function(keyBoardId) {
        if (keyBoardId !== -1) {
          log('info', ' connectKeyboard: success');
          socket.keyBoardId = keyBoardId;
          return socket.emit('keyboardConnected', {
            boardId: keyBoardId
          });
        } else {
          return log('info', ' connectKeyboard: failed');
        }
      });
    });

    // مدیریت رویدادهای Keyboard
    socket.on('boardEvent', function(data) {
      log('debug', 'boardEvent ' + JSON.stringify(data));
      if (socket.keyBoardId !== void 0 && data) {
        return kb_hub.sendEvent(socket.keyBoardId, data);
      }
    });

    // مدیریت اتصال Touchpad
    socket.on('connectTouchpad', function() {
      return tp_hub.connectTouchpad(function(touchpadId) {
        if (touchpadId !== -1) {
          log('info', ' connectTouchpad: success');
          socket.touchpadId = touchpadId;
          return socket.emit('touchpadConnected', {
            touchpadId: touchpadId
          });
        } else {
          return log('info', ' connectTouchpad: failed');
        }
      });
    });

    // مدیریت رویدادهای Touchpad
    socket.on('touchpadEvent', function(data) {
      log('debug', 'touchpadEvent ' + JSON.stringify(data));
      if (socket.touchpadId !== void 0 && data) {
        return tp_hub.sendEvent(socket.touchpadId, data);
      }
    });
  });

  // مدیریت خطاها
  server.on('error', function(err) {
    if (err.hasOwnProperty('errno')) {
      switch (err.errno) {
        case "EACCES":
          log('error', " You don't have permissions to open port " + port + ". " + "For ports smaller than 1024, you need root privileges.");
      }
    }
    throw err;
  });

  // شروع گوش دادن به درخواست‌ها
  server.listen(port, function() {
    return log('info', "󰌗 Listening on " + port);
  });

}).call(this);
